import React, { useState } from 'react';
import { Link2, Upload } from 'lucide-react';
import Button from './ui/Button';
import Input from './ui/Input';
import Card, { CardContent, CardFooter } from './ui/Card';
import { useToast } from './ui/Toast';
import { processUrl, processScreenshot, saveToNotion } from '../services/bookmarkService';

const BookmarkForm: React.FC = () => {
  const [url, setUrl] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [thoughts, setThoughts] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [preview, setPreview] = useState<{ title: string; summary: string; uploadId?: string; } | null>(null);
  const [isAutoGenerated, setIsAutoGenerated] = useState(true);
  const [manualTitle, setManualTitle] = useState('');
  const [manualSummary, setManualSummary] = useState('');
  const toast = useToast();

  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUrl(e.target.value);
    if (e.target.value && file) {
      setFile(null);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      const maxSize = 5 * 1024 * 1024; // 5MB
      const allowedTypes = ['image/png', 'image/jpeg', 'image/webp', 'image/gif'];

      if (selectedFile.size > maxSize) {
        toast.error('File size exceeds 5MB. Please upload a smaller file.');
        setFile(null);
        e.target.value = ''; // Reset file input
        return;
      }

      if (!allowedTypes.includes(selectedFile.type)) {
        toast.error('Invalid file type. Please upload a PNG, JPG, WEBP, or GIF image.');
        setFile(null);
        e.target.value = ''; // Reset file input
        return;
      }

      setFile(selectedFile);
      if (url) {
        setUrl('');
      }
    }
  };

  const handleThoughtsChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setThoughts(e.target.value);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isAutoGenerated) {
      if (!manualTitle.trim() || !manualSummary.trim()) {
        toast.error('Please provide both title and summary when auto-generation is disabled');
        return;
      }
      
      setPreview({
        title: manualTitle,
        summary: manualSummary,
      });
      return;
    }

    setIsProcessing(true);
    setPreview(null);

    try {
      let result;

      if (url) {
        result = await processUrl(url);
        toast.success('URL processed successfully');
      } else if (file) {
        result = await processScreenshot(file);
        toast.success('Screenshot processed successfully');
      } else {
        toast.error('Please provide a URL or upload a screenshot');
        setIsProcessing(false);
        return;
      }

      setPreview(result);
    } catch (error) {
      toast.error('Error processing content: ' + (error instanceof Error ? error.message : 'Unknown error'));
    } finally {
      setIsProcessing(false);
    }
  };

  const handleSave = async () => {
    if (!preview) return;

    setIsProcessing(true);
    try {
      await saveToNotion({
        title: preview.title,
        summary: preview.summary,
        source: url ? 'url' : 'screenshot',
        url: url || undefined,
        thoughts: thoughts,
        uploadId: (url ? undefined : preview.uploadId) || undefined,
      });
      
      toast.success('Saved to Notion successfully');
      setUrl('');
      setFile(null);
      setPreview(null);
      setThoughts('');
      setManualTitle('');
      setManualSummary('');
      setIsAutoGenerated(true);
    } catch (error) {
      toast.error('Error saving to Notion: ' + (error instanceof Error ? error.message : 'Unknown error'));
    } finally {
      setIsProcessing(false);
    }
  };

  const textareaClasses = `
    w-full px-4 py-2
    bg-white dark:bg-gray-800 
    border border-gray-300 dark:border-gray-600
    rounded-md shadow-sm 
    focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 
    disabled:opacity-50 disabled:cursor-not-allowed
  `;

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardContent className="p-6 md:p-8">
        <h2 className="text-2xl font-bold mb-8 text-center">Create Bookmark</h2>
        <form onSubmit={handleSubmit}>
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div className="space-y-6">
                <div>
                  <label htmlFor="url-input" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Website URL
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Link2 className="w-5 h-5 text-gray-400" />
                    </div>
                    <Input
                      type="url"
                      value={url}
                      onChange={handleUrlChange}
                      placeholder="Enter URL to bookmark"
                      disabled={isProcessing}
                      fullWidth
                      id="url-input"
                      className="pl-10"
                    />
                  </div>
                </div>
                
                <div className="flex items-center">
                  <div className="flex-grow h-px bg-gray-300 dark:bg-gray-700"></div>
                  <span className="px-4 text-sm text-gray-500 dark:text-gray-400">OR</span>
                  <div className="flex-grow h-px bg-gray-300 dark:bg-gray-700"></div>
                </div>
                
                <div className="flex flex-col">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Upload Screenshot
                  </label>
                  <div className="flex flex-col justify-center items-center px-6 pt-5 pb-6 border-2 border-gray-300 dark:border-gray-700 border-dashed rounded-md">
                    <div className="space-y-1 text-center">
                      <Upload className="mx-auto h-12 w-12 text-gray-400" />
                      <div className="flex text-sm text-gray-600 dark:text-gray-400">
                        <label
                          htmlFor="file-upload"
                          className="relative cursor-pointer rounded-md font-medium text-blue-500 hover:text-blue-400 focus-within:outline-none"
                        >
                          <span>Upload a file</span>
                          <input
                            id="file-upload"
                            name="file-upload"
                            type="file"
                            className="sr-only"
                            accept="image/png, image/jpeg, image/webp, image/gif"
                            onChange={handleFileChange}
                            disabled={isProcessing}
                          />
                        </label>
                        <p className="pl-1">or drag and drop</p>
                      </div>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        PNG, JPG, WEBP, GIF up to 5MB
                      </p>
                    </div>
                  </div>
                  {file && (
                    <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
                      Selected file: {file.name}
                    </p>
                  )}
                </div>
              </div>

              <div className="space-y-6">
                <div className="flex items-center mb-4">
                  <input
                    type="checkbox"
                    id="auto-generated"
                    checked={isAutoGenerated}
                    onChange={(e) => setIsAutoGenerated(e.target.checked)}
                    className="h-4 w-4 text-blue-500 rounded border-gray-300 focus:ring-blue-500"
                  />
                  <label htmlFor="auto-generated" className="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                    Auto-generate title and summary
                  </label>
                </div>

                <div className={isAutoGenerated ? 'opacity-50 pointer-events-none' : ''}>
                  <Input
                    label="Title"
                    value={manualTitle}
                    onChange={(e) => setManualTitle(e.target.value)}
                    placeholder="Enter title"
                    disabled={isAutoGenerated || isProcessing}
                    fullWidth
                  />
                  
                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Summary
                    </label>
                    <textarea
                      value={manualSummary}
                      onChange={(e) => setManualSummary(e.target.value)}
                      placeholder="Enter summary"
                      disabled={isAutoGenerated || isProcessing}
                      rows={4}
                      className={textareaClasses}
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="thoughts-input" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Share your thoughts
                  </label>
                  <textarea
                    id="thoughts-input"
                    value={thoughts}
                    onChange={handleThoughtsChange}
                    placeholder="Share your thoughts..."
                    disabled={isProcessing}
                    rows={4}
                    className={textareaClasses}
                  />
                </div>
              </div>
            </div>

            <div className="flex justify-end pt-4">
              <Button 
                type="submit" 
                disabled={(!url && !file && isAutoGenerated) || (!manualTitle && !manualSummary && !isAutoGenerated) || isProcessing}
                isLoading={isProcessing && !preview}
              >
                {isAutoGenerated ? 'Process' : 'Preview'}
              </Button>
            </div>
          </div>
        </form>
      </CardContent>

      {preview && (
        <CardFooter className="bg-gray-50 dark:bg-gray-900 flex flex-col items-start">
          <h3 className="text-lg font-semibold mb-2">Preview</h3>
          <div className="w-full p-4 bg-white dark:bg-gray-800 rounded-md border border-gray-200 dark:border-gray-700 mb-4">
            <h4 className="font-bold">{preview.title}</h4>
            <p className="text-gray-600 dark:text-gray-400 mt-2 line-clamp-3">
              {preview.summary}
            </p>
            {thoughts && (
              <div className="mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                <h5 className="text-sm font-semibold text-gray-700 dark:text-gray-300">Your Thoughts:</h5>
                <p className="text-gray-500 dark:text-gray-400 text-sm mt-1 line-clamp-3">{thoughts}</p>
              </div>
            )}
          </div>
          <div className="flex justify-end w-full">
            <Button
              variant="outline"
              className="mr-2"
              onClick={() => setPreview(null)}
              disabled={isProcessing}
            >
              Edit
            </Button>
            <Button
              onClick={handleSave}
              disabled={isProcessing}
              isLoading={isProcessing && !!preview}
            >
              Save to Notion
            </Button>
          </div>
        </CardFooter>
      )}
    </Card>
  );
};

export default BookmarkForm;